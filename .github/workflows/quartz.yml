name: deploy-quartz

on: 
  workflow_dispatch:
  push:
   branches:
     - obsidian

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true  # 只初始化 `.gitmodules` 里配置的子模块（默认不递归 recursive）
          fetch-depth: 1  # 仅拉取最新提交，避免获取完整历史

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build
        uses: bGZo/quartz-build-action@custom-css-support
        with:
          quartz_config: .github/quartz/quartz.config.ts
          quartz_layout: .github/quartz/quartz.layout.ts
          quartz_custom_css: .github/quartz/custom.scss

      # 给 GitHub Pages 上传，默认会压缩成 .tar
      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site  # 供 GitHub Pages 使用

      # 给 Vercel 上传，确保它是一个 **文件夹**，不会被压缩
      - name: Upload artifact for Vercel
        uses: actions/upload-artifact@v4
        with:
          name: quartzNotes
          path: ./_site  # 供 Vercel 使用
          compression-level: 0  # ⚠️ 关键！防止 GitHub Actions 自动压缩

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 部署 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # 下载 Vercel 需要的 artifact
      - name: Download artifact for Vercel
        uses: actions/download-artifact@v4
        with:
          name: quartzNotes
          path: ./_site  # 需要解压到正确的目录

      - name: List downloaded files (调试)
        run: ls -R ./_site  # 确保 _site 目录是解压开的，而不是 .tar

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          vercel deploy ./_site --prod --token=${{ secrets.VERCEL_TOKEN }} --archive=tgz

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}